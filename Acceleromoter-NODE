#include <ros.h>
#include <std_msgs/Int8.h>

ros::NodeHandle  nh;
#include "NAxisMotion.h"        //Contains the bridge code between the API and the Arduino Environment

#include <Wire.h>

float x1,y1;   // position of accelerometer 

int pwmx1,pwmx2; // pwmx1,pwmy1 corresponds to left wheel

int pwmy1,pwmy2;  // pwmx2,pwmy2 corresponds to right wheel

NAxisMotion mySensor;                 //Object that for the sensor
    

bool updateSensorData = true;         //Flag to update the sensor data. Default is true to perform the first read before the first stream

std_msgs::Int8 str_msg1;
std_msgs::Int8 str_msg2;

ros::Publisher RW("rightWheel", &str_msg2);     // topic name -rightWheel
ros::Publisher LW("lefttWheel", &str_msg1);     //topic name-leftWheel

void setup() //This code is executed once

{

 // Serial.begin(9600);           //Initialize the Serial Port to view information on the Serial Monitor

  I2C.begin();                    //Initialize I2C communication to the let the library communicate with the sensor. 

  //Sensor Initialization

  mySensor.initSensor();          //The I2C Address can be changed here inside this function in the library

  mySensor.setOperationMode(OPERATION_MODE_NDOF);   //Can be configured to other operation modes as desired

  mySensor.setUpdateMode(MANUAL);	//The default is AUTO. Changing to manual requires calling the relevant update functions prior to calling the read functions

  //Setting to MANUAL requires lesser reads to the sensor
mySensor.updateAccelConfig();
mySensor.readAccelRange();
mySensor.readAccelBandwidth();
mySensor.readAccelPowerMode();

 nh.initNode();
  nh.advertise(RW);
  nh.advertise(LW);
}



void loop() //This code is looped forever

{
  int a=0;

mySensor.updateAccel();        //Update the Accelerometer data
 
x1=mySensor.readAccelX();     
y1=mySensor.readAccelY();
if(x1>4.5 || x1<-4.5 || y1>4.5 || y1<-4.5)
a=1;
if(x1>4.5 && x1<9.5){           //STRAIGHT
  pwmx1=14*x1-63;     /// This function gives PWM output corresponding to the inclination of accelerometer 
 str_msg1.data=pwmx1;
 str_msg2.data=pwmx1;
 
  RW.publish(&str_msg2);
  LW.publish(&str_msg1); 
  delay(50);
 a=1;
}
if(x1>9.5){
  RW.publish(&str_msg2);
  LW.publish(&str_msg1); 
  delay(50);
a=1; 
}
if(x1<-4.5 && x1>-9.5){         // REVERSE
  pwmx2=-(10*x1)-45;
  str_msg1.data=-pwmx2;
 str_msg2.data=-pwmx2;
 RW.publish(&str_msg2);
  LW.publish(&str_msg1); 
  delay(50);
 a=1;
}
if(x1<-9.5){
  RW.publish(&str_msg2);
  LW.publish(&str_msg1); 
  delay(50);
 a=1;
}
if(y1>4.5 && y1<9.5){          //LEFT
  a=0;
  pwmy1=14*y1-63;
  str_msg1.data=a;
 str_msg2.data=pwmy1;
  RW.publish(&str_msg2);
  LW.publish(&str_msg1); 
  delay(50);
  a=1;
}
if(y1>9.5){
    RW.publish(&str_msg2);
  LW.publish(&str_msg1); 
  delay(50);
  a=1;
}
if(y1<-4.5 && y1>-9.5){        //RIGHT
   a=0;
  pwmy2=-(14*y1)-63;
  str_msg1.data=pwmy2;
 str_msg2.data=0;
 RW.publish(&str_msg2);
  LW.publish(&str_msg1); 
  delay(50);
  a=1;
}
if(y1<-9.5){
  RW.publish(&str_msg2);
  LW.publish(&str_msg1); 
  delay(50);
  a=1;
}
if(a==0){               //WHEN IDLE
  delay(50);
  str_msg1.data=0;
  str_msg2.data=0;
 
  RW.publish(&str_msg2);
  LW.publish(&str_msg1);
}
nh.spinOnce();
}
